{"version":3,"sources":["Constants/Constants.js","pages/SingleMeme/SingleMeme.js","pages/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["BACKEND_SERVER_HOST","SingleMeme","React","Component","props","refreshCallback","componentDidMount","render","state","error","isLoaded","meme","memes_to_show","image","className","style","display","flexDirection","padding","textAlign","fontSize","marginTop","Button","onClick","variant","width","fontWeight","fontFamily","alignSelf","height","maxWidth","flex","src","alt","title","fetch","Constants","then","res","json","result","setState","next","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kSAEaA,EAAsB,iC,OCkFpBC,GCxEIC,IAAMC,U,kDDDvB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA8BRC,gBAAkB,WAChB,EAAKC,qBAhCY,EAmCnBC,OAAS,WACP,MAAkC,EAAKC,MAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,KACrBC,EAAgB,GAgBtB,OAdIA,EADEF,GAAYD,EACE,wBAETC,IACHC,IAAQA,EAAKE,QAIC,mBAKF,aAGlB,sBAAKC,UAAU,iBAAiBC,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,QAAQ,cAA1F,UACE,sBAAMH,MAAO,CAACI,UAAU,MAAOC,SAAS,OAAQC,UAAU,UAC1D,cAAC,IAAD,CAAMN,MAAO,CAACI,UAAU,UAAxB,SACE,cAACG,EAAA,EAAD,CAAQC,QAAS,EAAKlB,gBAAiBmB,QAAQ,eAAeT,MAAO,CAACI,UAAU,SAAUM,MAAM,cAAeL,SAAS,OAAQM,WAAW,MAAOC,WAAW,sBAA7J,qCAKDf,GACG,sBAAKG,MAAO,CAACG,QAAQ,OAAQO,MAAM,OAAQT,QAAQ,OAAQC,cAAc,UAAzE,UACE,qBAAKF,MAAO,CAACa,UAAU,SAAUC,OAAO,QAASJ,MAAM,OAAQK,SAAS,MAAOC,KAAK,GAAIC,IAAKrB,EAAKE,MAAOoB,IAAI,UAC7G,sBAAMlB,MAAO,CAACI,UAAU,SAAUC,SAAS,OAAQC,UAAU,OAAQU,KAAK,GAA1E,SAA+EpB,EAAKuB,eA/D5F,EAAK1B,MAAQ,CACXC,MAAO,KACPC,UAAU,GAJK,E,qDAQnB,WAAqB,IAAD,OAClByB,MACEC,EDlByB,eCqBxBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZ/B,UAAU,EACVC,KAAM6B,OAGV,SAAC/B,GACC,EAAKgC,SAAS,CACZhC,QACAC,UAAU,EACVgC,KAAM,c,GA1BOxC,IAAMC,YE2DhBwC,E,4MAXbpC,OAAS,WACT,OACE,qBAAKO,UAAU,iBAAf,SACE,qBAAKA,UAAU,eAAf,SACI,cAAC,EAAD,S,YALQZ,IAAMC,WC7CTyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAS7C,OACP,cAAC,IAAM8C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.b42fe37f.chunk.js","sourcesContent":["\r\nexport const SERVER_HOST = \"http://localhost:3000/\";\r\nexport const BACKEND_SERVER_HOST = \"https://98921b033975.ngrok.io/\";\r\nexport const GET_RANDOM_MEME = \"random-meme\";\r\nexport const GET_MEME_LIST = \"memes\";\r\nexport const RANDOM_MEME = \"random\";\r\n\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport * as Constants from \"../../Constants/Constants\";\r\n\r\nclass SingleMeme extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      Constants.BACKEND_SERVER_HOST +\r\n        Constants.GET_RANDOM_MEME\r\n    )\r\n      .then((res) => res.json ())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            meme: result,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            error,\r\n            isLoaded: true,\r\n            next: null,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  refreshCallback = () => {\r\n    this.componentDidMount();\r\n  };\r\n\r\n  render = () => {\r\n    const { error, isLoaded, meme } = this.state;\r\n    var memes_to_show = \"\";\r\n    if (isLoaded && error){\r\n      memes_to_show = \"Error. Unable to Load\"\r\n    }\r\n    else if (isLoaded){\r\n      if (meme && meme.image){\r\n        memes_to_show = false;\r\n      }\r\n      else{\r\n        memes_to_show = \"No Memes to show\"\r\n      }\r\n\r\n    }\r\n    else{\r\n      memes_to_show = \"Loading...\"\r\n    }\r\n  return (\r\n    <div className=\"home-container\" style={{display: \"flex\", flexDirection: \"column\", padding:\"0 5% 5% 5%\"}}>\r\n      <span style={{textAlign:\"end\", fontSize:\"18px\", marginTop:\"50px\"}}></span>\r\n      <Link style={{textAlign:\"center\"}}>\r\n        <Button onClick={this.refreshCallback} variant=\"outline-blue\" style={{textAlign:\"center\", width:\"max-content\", fontSize:\"24px\", fontWeight:\"500\", fontFamily:\"Roboto,\" +\r\n              \" sans-serif\"}}>\r\n          Portal to Random Meme\r\n        </Button>\r\n      </Link>\r\n      {memes_to_show ? (memes_to_show) :\r\n          <div style={{padding:\"10px\", width:\"100%\", display:\"flex\", flexDirection:\"column\"}}>\r\n            <img style={{alignSelf:\"center\", height:\"500px\", width:\"auto\", maxWidth:\"80%\", flex:1}} src={meme.image} alt=\"Image\"/>\r\n            <span style={{textAlign:\"center\", fontSize:\"18px\", marginTop:\"20px\", flex:1}}>{meme.title}</span>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n  };\r\n}\r\n\r\nexport default SingleMeme;\r\n","import \"./Home.css\";\r\nimport React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport * as Constants from \"../../Constants/Constants\";\r\nimport {GET_MEME_LIST, SERVER_HOST} from \"../../Constants/Constants\";\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      memes: [],\r\n      urlQueryParams: null,\r\n      pageCount: 0,\r\n      next: null,\r\n      listStyle: \"grid\",\r\n      show_filter: false,\r\n      filter_to_show: \"year\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let url_query_params = this.state.urlQueryParams;\r\n    if (!url_query_params) {\r\n      if (this.props.location){\r\n        url_query_params = new URLSearchParams(this.props.location.search);\r\n      }\r\n      else{\r\n        url_query_params = new URLSearchParams();\r\n      }\r\n    } else {\r\n      window.history.pushState(\r\n        { html: window.html, pageTitle: window.pageTitle },\r\n        \"\",\r\n        window.location.origin +\r\n          window.location.pathname +\r\n          \"?\" +\r\n          url_query_params.toString()\r\n      );\r\n    }\r\n    fetch(\r\n      Constants.BACKEND_SERVER_HOST +\r\n        Constants.GET_MEME_LIST +\r\n        \"?\" +\r\n        url_query_params.toString()\r\n    )\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            memes: result,\r\n            next: result.next,\r\n            urlQueryParams: url_query_params,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            error,\r\n            isLoaded: true,\r\n            next: null,\r\n            urlQueryParams: url_query_params,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  refreshCallback = () => {\r\n    this.componentDidMount();\r\n  };\r\n\r\n  render = () => {\r\n    const { error, isLoaded, memes, urlQueryParams } = this.state;\r\n    var memes_to_show = \"\";\r\n    if (isLoaded && error){\r\n      memes_to_show = \"Error. Unable to Load\"\r\n    }\r\n    else if (isLoaded){\r\n      if (memes && memes.count>0){\r\n        memes_to_show = false;\r\n      }\r\n      else{\r\n        memes_to_show = \"No Memes to show\"\r\n      }\r\n\r\n    }\r\n    else{\r\n      memes_to_show = \"Loading...\"\r\n    }\r\n  return (\r\n    <div className=\"home-container\" style={{display: \"flex\", flexDirection: \"column\", padding:\"0 5% 5% 5%\"}}>\r\n      <span style={{textAlign:\"end\", fontSize:\"18px\", marginTop:\"50px\"}}></span>\r\n      <Link to={\"/\" + Constants.RANDOM_MEME}>\r\n        <Button variant=\"outline-blue\" style={{textAlign:\"center\", width:\"max-content\", fontSize:\"24px\", fontWeight:\"500\", fontFamily:\"Roboto,\" +\r\n              \" sans-serif\"}}>\r\n          Portal to Random Meme\r\n        </Button>\r\n      </Link>\r\n      <span style={{textAlign:\"center\", fontSize:\"30px\", fontWeight:\"500\", fontFamily:\"Roboto, sans-serif\"}}>And Here's a list</span>\r\n      {memes_to_show ? (memes_to_show) :\r\n          <div style={{padding:\"10px\"}}>\r\n            {memes.results.map((key, i) => (\r\n            <div key={{i}}>\r\n              <img style={{width:\"100%\"}} src={key.image} alt=\"Image\"/>\r\n            </div>\r\n        ))}\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n  };\r\n}\r\n\r\nexport default Home;\r\n","import \"./App.css\";\nimport React from 'react';\n// import ls from 'local-storage';\n// import Script from 'react-load-script';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from \"./pages/Home/Home\";\nimport * as Constants from \"./Constants/Constants\";\nimport SingleMeme from \"./pages/SingleMeme/SingleMeme\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { library } from \"@fortawesome/fontawesome-svg-core\";\n// import {\n//   faSearch, faLocationArrow\n// } from \"@fortawesome/free-solid-svg-icons\";\n\n// library.add(faSearch, faLocationArrow);\n\n\nconst NoMatchFound = () => {\n  return (\n    <h3\n      className=\"center\"\n      style={{\n        marginTop: \"100px\",\n        display: \"block\",\n        width: \"100%\",\n        textAlign: \"center\",\n      }}\n    >\n      404 - Not found\n    </h3>\n  );\n};\n\nconst UnderConstruction = () => {\n  return (\n    <div>\n    <h3\n      className=\"center\"\n      style={{\n        marginTop: \"100px\",\n        marginBottom: \"100px\",\n        display: \"block\",\n        width: \"100%\",\n        textAlign: \"center\",\n      }}\n    >\n      Under Construction\n    </h3>\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  render = () => {\n  return (\n    <div className=\"page-container\">\n      <div className=\"content-wrap\">\n          <SingleMeme />\n      </div>\n    </div>\n  );\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}